<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yiqi&#39;s blog</title>
    <link>/zh/posts/</link>
    <description>Yiqi&#39;s blog (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    
      
        <managingEditor>halfseteamedbun@gmail.com
          
            (Yiqi)
          
        </managingEditor>
      

      
    

    
    <lastBuildDate>Sat, 18 May 2024 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/zh/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 GitLab CI 自动合并 master 分支代码到其他分支</title>
      <link>/zh/posts/auto-merge/</link>
      <pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate>
      <author>halfseteamedbun@gmail.com (Yiqi)</author>
      <guid>/zh/posts/auto-merge/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;
  背景
&lt;/h2&gt;&lt;p&gt;在我们的开发流程中，要求在发布代码合并到 &lt;code&gt;master&lt;/code&gt; 分支后，&lt;code&gt;stg&lt;/code&gt; 和 &lt;code&gt;pre&lt;/code&gt; 分支也必须包含最新的 &lt;code&gt;master&lt;/code&gt; 代码。&lt;/p&gt;
&lt;p&gt;为此，公司设置了一个机器人（bot）来比较 commit 差异。如果在发布代码合并到 &lt;code&gt;master&lt;/code&gt; 分支一天后，&lt;code&gt;stg&lt;/code&gt; 和 &lt;code&gt;pre&lt;/code&gt; 分支仍未更新，团队收到提醒。&lt;/p&gt;
&lt;p&gt;然而，团队成员经常忘记手动执行这个合并操作，导致频繁的提醒，影响了工作效率。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;
  解决方案
&lt;/h2&gt;&lt;p&gt;为了自动化这一流程，避免人为疏忽，我编写了一个 GitLab CI 脚本，一旦 &lt;code&gt;master&lt;/code&gt; 分支的代码发生变动：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;自动合并&lt;/strong&gt;：将 &lt;code&gt;master&lt;/code&gt; 分支的代码自动合并到 &lt;code&gt;stg&lt;/code&gt; 和 &lt;code&gt;pre&lt;/code&gt; 分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常处理&lt;/strong&gt;：如果合并过程中出现冲突，导致合并失败，脚本会自动创建一个 Merge Request（MR），提醒开发者及时处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面详细介绍该脚本的实现过程。&lt;/p&gt;
&lt;h2 id=&#34;实现步骤&#34;&gt;
  实现步骤
&lt;/h2&gt;&lt;h3 id=&#34;1-添加新的阶段-merge&#34;&gt;
  1. 添加新的阶段 &lt;code&gt;merge&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;在 GitLab CI/CD 中，&lt;code&gt;stages&lt;/code&gt; 用于定义流水线中的各个阶段。GitLab Runner 会按照 &lt;code&gt;stages&lt;/code&gt; 中定义的顺序依次执行任务。&lt;/p&gt;
&lt;p&gt;首先，在 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 文件中添加一个新的阶段 &lt;code&gt;merge&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;stages&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - merge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-添加-merge-to-stg-任务&#34;&gt;
  2. 添加 &lt;code&gt;merge-to-stg&lt;/code&gt; 任务
&lt;/h3&gt;&lt;p&gt;定义一个名为 &lt;code&gt;merge-to-stg&lt;/code&gt; 的任务，用于将 &lt;code&gt;master&lt;/code&gt; 分支的代码合并到 &lt;code&gt;stg&lt;/code&gt; 分支。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;merge-to-stg&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;stage&lt;/span&gt;: merge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;allow_failure&lt;/span&gt;: &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;only&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;refs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;配置说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stage: merge&lt;/code&gt;：指定该任务属于 &lt;code&gt;merge&lt;/code&gt; 阶段，确保其在正确的阶段执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allow_failure: true&lt;/code&gt;：允许任务失败而不影响整个流水线的状态。即使合并过程中出现冲突，其他任务仍可继续执行，不会被阻塞。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;only&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;refs: - master&lt;/code&gt;：仅在推送到 &lt;code&gt;master&lt;/code&gt; 分支时触发该任务，避免在其他分支上执行不必要的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-编写合并脚本&#34;&gt;
  3. 编写合并脚本
&lt;/h3&gt;&lt;h4 id=&#34;31-配置-git-用户信息并获取最新代码&#34;&gt;
  3.1 配置 Git 用户信息并获取最新代码
&lt;/h4&gt;&lt;p&gt;在 &lt;code&gt;script&lt;/code&gt; 中，首先配置 Git 用户信息，并获取远程仓库的最新代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git config --global user.email &amp;#34;$GITLAB_USER_EMAIL&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git config --global user.name &amp;#34;$GITLAB_USER_LOGIN&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git fetch origin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置 Git 用户信息&lt;/strong&gt;：使用环境变量 &lt;code&gt;$GITLAB_USER_EMAIL&lt;/code&gt; 和 &lt;code&gt;$GITLAB_USER_LOGIN&lt;/code&gt; 设置 Git 用户的邮箱和用户名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取远程代码&lt;/strong&gt;：&lt;code&gt;git fetch origin&lt;/code&gt; 获取远程仓库的最新提交信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-切换到目标分支&#34;&gt;
  3.2 切换到目标分支
&lt;/h4&gt;&lt;p&gt;切换到需要合并代码的目标分支 &lt;code&gt;stg&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git checkout stg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;33-执行合并并记录状态&#34;&gt;
  3.3 执行合并并记录状态
&lt;/h4&gt;&lt;p&gt;执行合并操作，将 &lt;code&gt;master&lt;/code&gt; 分支的代码合并到当前分支，并推送到远程仓库。然后记录合并状态。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git merge origin/$CI_COMMIT_REF_NAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git push https://oauth2:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - echo &amp;#34;SUCCESS&amp;#34; &amp;gt; .job_status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;合并代码&lt;/strong&gt;：&lt;code&gt;git merge origin/$CI_COMMIT_REF_NAME&lt;/code&gt; 将 &lt;code&gt;origin/master&lt;/code&gt; 分支的代码合并到当前分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推送代码&lt;/strong&gt;：使用项目访问令牌将合并后的代码推送到远程仓库（请确保在项目中设置了 &lt;code&gt;$PROJECT_ACCESS_TOKEN&lt;/code&gt; 环境变量）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;记录状态&lt;/strong&gt;：&lt;code&gt;echo &amp;quot;SUCCESS&amp;quot; &amp;gt; .job_status&lt;/code&gt; 将合并成功的状态记录到 &lt;code&gt;.job_status&lt;/code&gt; 文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;34-在任务完成后检查合并状态&#34;&gt;
  3.4 在任务完成后检查合并状态
&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;after_script&lt;/code&gt; 定义在任务执行结束后需要执行的命令，检查合并是否成功，并在失败时采取相应措施。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;after_script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - job_status=$(cat .job_status 2&amp;gt;/dev/null || echo &amp;#34;FAILED&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - current_branch=$(git rev-parse --abbrev-ref HEAD)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - |&lt;span style=&#34;color:#5af78e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    if [ &amp;#34;$job_status&amp;#34; == &amp;#39;SUCCESS&amp;#39; ]; then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      echo &amp;#34;Merge to $current_branch succeeded.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      echo &amp;#34;Merge to $current_branch failed.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      curl --request POST --header &amp;#34;PRIVATE-TOKEN:$PROJECT_ACCESS_TOKEN&amp;#34; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      --data &amp;#34;source_branch=$CI_COMMIT_REF_NAME&amp;amp;target_branch=$current_branch&amp;amp;title=Auto merge $CI_COMMIT_REF_NAME to $current_branch&amp;#34; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      &amp;#34;https://$CI_SERVER_HOST/api/v4/projects/$CI_PROJECT_ID/merge_requests&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    fi&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;检查合并状态&lt;/strong&gt;：读取 &lt;code&gt;.job_status&lt;/code&gt; 文件，如果不存在则视为合并失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根据状态执行操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成功&lt;/strong&gt;：输出成功信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;失败&lt;/strong&gt;：输出失败信息，并通过 GitLab API 创建一个 MR，提醒相关人员处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-提取公共脚本片段以减少重复&#34;&gt;
  4. 提取公共脚本片段以减少重复
&lt;/h3&gt;&lt;p&gt;由于需要对多个分支执行相同的操作，为了提高配置文件的可维护性，我们使用 YAML 的锚点（&lt;code&gt;&amp;amp;&lt;/code&gt;）和别名（&lt;code&gt;*&lt;/code&gt;）来提取公共的脚本片段。&lt;/p&gt;
&lt;h4 id=&#34;41-定义公共脚本片段&#34;&gt;
  4.1 定义公共脚本片段
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;.fetch_script&lt;/span&gt;: &lt;span style=&#34;color:#78787e&#34;&gt;&amp;amp;fetch_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git config --global user.email &amp;#34;$GITLAB_USER_EMAIL&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git config --global user.name &amp;#34;$GITLAB_USER_LOGIN&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git fetch origin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;.merge_script&lt;/span&gt;: &lt;span style=&#34;color:#78787e&#34;&gt;&amp;amp;merge_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git merge origin/$CI_COMMIT_REF_NAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git push https://oauth2:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - echo &amp;#34;SUCCESS&amp;#34; &amp;gt; .job_status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;.check_status_script&lt;/span&gt;: &lt;span style=&#34;color:#78787e&#34;&gt;&amp;amp;check_status_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - job_status=$(cat .job_status 2&amp;gt;/dev/null || echo &amp;#34;FAILED&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - current_branch=$(git rev-parse --abbrev-ref HEAD)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - |&lt;span style=&#34;color:#5af78e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    if [ &amp;#34;$job_status&amp;#34; == &amp;#39;SUCCESS&amp;#39; ]; then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      echo &amp;#34;Merge to $current_branch succeeded.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      echo &amp;#34;Merge to $current_branch failed.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      curl --request POST --header &amp;#34;PRIVATE-TOKEN:$PROJECT_ACCESS_TOKEN&amp;#34; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      --data &amp;#34;source_branch=$CI_COMMIT_REF_NAME&amp;amp;target_branch=$current_branch&amp;amp;title=Auto merge $CI_COMMIT_REF_NAME to $current_branch&amp;#34; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      &amp;#34;https://$CI_SERVER_HOST/api/v4/projects/$CI_PROJECT_ID/merge_requests&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    fi&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;42-在任务中引用公共脚本&#34;&gt;
  4.2 在任务中引用公共脚本
&lt;/h4&gt;&lt;p&gt;在刚刚的&lt;code&gt;merge-to-stg&lt;/code&gt;任务中，修改为使用 &lt;code&gt;*script_name&lt;/code&gt; 引用预先定义的脚本片段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;merge-to-stg&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;stage&lt;/span&gt;: merge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;allow_failure&lt;/span&gt;: &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*fetch_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - git checkout stg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*merge_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;after_script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*check_status_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;only&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;refs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，可以这么编写 &lt;code&gt;merge-to-pre&lt;/code&gt; 任务，将代码合并到 &lt;code&gt;pre&lt;/code&gt; 分支，避免重复编写相同的代码。&lt;/p&gt;
&lt;h3 id=&#34;5-完整的-gitlab-ciyml-文件&#34;&gt;
  5. 完整的 &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; 文件
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;image&lt;/span&gt;: your-docker-image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;stages&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - merge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;.fetch_script&lt;/span&gt;: &lt;span style=&#34;color:#78787e&#34;&gt;&amp;amp;fetch_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git config --global user.email &amp;#34;$GITLAB_USER_EMAIL&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git config --global user.name &amp;#34;$GITLAB_USER_LOGIN&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git fetch origin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;.merge_script&lt;/span&gt;: &lt;span style=&#34;color:#78787e&#34;&gt;&amp;amp;merge_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git merge origin/$CI_COMMIT_REF_NAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - git push https://oauth2:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - echo &amp;#34;SUCCESS&amp;#34; &amp;gt; .job_status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;.check_status_script&lt;/span&gt;: &lt;span style=&#34;color:#78787e&#34;&gt;&amp;amp;check_status_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - job_status=$(cat .job_status 2&amp;gt;/dev/null || echo &amp;#34;FAILED&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - current_branch=$(git rev-parse --abbrev-ref HEAD)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - |&lt;span style=&#34;color:#5af78e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    if [ &amp;#34;$job_status&amp;#34; == &amp;#39;SUCCESS&amp;#39; ]; then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      echo &amp;#34;Merge to $current_branch succeeded.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      echo &amp;#34;Merge to $current_branch failed.&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      curl --request POST --header &amp;#34;PRIVATE-TOKEN:$PROJECT_ACCESS_TOKEN&amp;#34; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      --data &amp;#34;source_branch=$CI_COMMIT_REF_NAME&amp;amp;target_branch=$current_branch&amp;amp;title=Auto merge $CI_COMMIT_REF_NAME to $current_branch&amp;#34; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;      &amp;#34;https://$CI_SERVER_HOST/api/v4/projects/$CI_PROJECT_ID/merge_requests&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    fi&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;merge-to-stg&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;stage&lt;/span&gt;: merge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;allow_failure&lt;/span&gt;: &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*fetch_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - git checkout stg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*merge_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;after_script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*check_status_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;only&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;refs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;merge-to-pre&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;stage&lt;/span&gt;: merge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;allow_failure&lt;/span&gt;: &lt;span style=&#34;color:#ff6ac1&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*fetch_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - git checkout pre
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*merge_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;after_script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#78787e&#34;&gt;*check_status_script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;only&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;refs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;
  总结
&lt;/h2&gt;&lt;p&gt;通过以上配置，我们实现了 &lt;code&gt;master&lt;/code&gt; 分支有任何变更后，自动将其合并到 &lt;code&gt;stg&lt;/code&gt; 和 &lt;code&gt;pre&lt;/code&gt; 分支的功能。即使合并过程中出现冲突，脚本也会自动创建 MR，提醒开发者及时处理。这种自动化方式有效地解决了团队成员忘记手动合并的问题，确保了代码在不同环境中的一致性，提高了工作效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advance Typescript</title>
      <link>/zh/posts/advance-typescript/</link>
      <pubDate>Fri, 01 Mar 2024 16:23:03 +0800</pubDate>
      <author>halfseteamedbun@gmail.com (Yiqi)</author>
      <guid>/zh/posts/advance-typescript/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;
  背景
&lt;/h2&gt;&lt;h3 id=&#34;使用-typescript-的好处&#34;&gt;
  使用 TypeScript 的好处
&lt;/h3&gt;&lt;p&gt;使用 TypeScript 有很多的好处，它可以让代码变得更可靠和更容易维护：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可靠性&lt;/strong&gt;: TypeScript 的类型系统能在写代码时捕捉到很多错误，这样可以减少运行时的出错几率，让代码更加稳定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可读性&lt;/strong&gt;: 明确的类型定义让代码更容易理解，这对开发者来说维护起来更简单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重命名和重构的低成本&lt;/strong&gt;:类型检查器可以帮助我们在重命名和重构代码时找到正确的内容，从而有效减少新错误的引入风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如果不小心滥用&#34;&gt;
  如果不小心滥用&amp;hellip;?
&lt;/h3&gt;&lt;p&gt;然而，TypeScript 也像一把双刃剑，如果不小心滥用，可能会引发一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;联合类型的滥用&lt;/strong&gt;: 随着业务逻辑的复杂化，联合类型可能会变得越来越复杂，导致某些属性变得不可访问。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; A &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; { foo: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; B &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; { bar: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; C &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; B;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt; getFoo(obj: &lt;span style=&#34;color:#9aedfe&#34;&gt;C&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  obj.foo(); &lt;span style=&#34;color:#78787e&#34;&gt;// ❌ 不存在
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;  obj.bar(); &lt;span style=&#34;color:#78787e&#34;&gt;// ❌ 不存在
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;类型断言的滥用&lt;/strong&gt;: 为了处理复杂的类型问题，可能会频繁使用 &lt;code&gt;as&lt;/code&gt;操作符。虽然这可以把问题解决，但会使代码变得不那么优雅和脆弱。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些滥用常常会让代码更难维护，也更容易出错。&lt;/p&gt;
&lt;p&gt;接下来，我会结合自己的开发经验，和大家讨论如何更好地使用 TypeScript。&lt;/p&gt;
&lt;p&gt;例如泛型、&lt;code&gt;extends&lt;/code&gt;、&lt;code&gt;keyof&lt;/code&gt;、&lt;code&gt;infer&lt;/code&gt;，甚至类型递归，帮助我们编写更健壮、优雅且易维护的代码。&lt;/p&gt;
&lt;p&gt;通过深入理解和应用这些特性，我们可以更好地应对复杂类型的挑战，同时保持代码的清晰和可读性。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lets-go-&#34;&gt;
  Let&amp;rsquo;s go ~
&lt;/h2&gt;&lt;h3 id=&#34;1-generic&#34;&gt;
  1. Generic
&lt;/h3&gt;&lt;p&gt;泛型是一种让函数、接口或类型可以接受多种类型的特性，使代码更加通用和可复用。&lt;/p&gt;
&lt;p&gt;任何类型都可以成为泛型。它由你来制定。&lt;/p&gt;
&lt;p&gt;比如下面的代码，当传入的类型 T 是 &lt;code&gt;number&lt;/code&gt; ，那么 返回类型 T 就是 &lt;code&gt;number&lt;/code&gt;。当传入的类型 T 是 &lt;code&gt;string&lt;/code&gt; ，那么 返回类型 T 就是 &lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt; identity&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt;(arg: &lt;span style=&#34;color:#9aedfe&#34;&gt;T&lt;/span&gt;)&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; T {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; arg;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; num &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; identity(&lt;span style=&#34;color:#ff9f43&#34;&gt;42&lt;/span&gt;); &lt;span style=&#34;color:#78787e&#34;&gt;// number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; str &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; identity(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#78787e&#34;&gt;// string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;泛型的使用可以帮助我们减少代码重复，增强类型的灵活性和安全性。&lt;/p&gt;
&lt;p&gt;例如处理 API 响应时，&lt;code&gt;ApiResponse&amp;lt;T&amp;gt;&lt;/code&gt; 接口可以接受不同类型的数据结构。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; ApiResponse&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  data: &lt;span style=&#34;color:#9aedfe&#34;&gt;T&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// 👤
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; User &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; { id: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;; name: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; userResponse: &lt;span style=&#34;color:#9aedfe&#34;&gt;ApiResponse&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;User&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  data&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; { id: &lt;span style=&#34;color:#9aedfe&#34;&gt;1&lt;/span&gt;, name&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status: &lt;span style=&#34;color:#9aedfe&#34;&gt;200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;// 📖
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Book &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  id: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  title: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  author: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  price: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inStock: &lt;span style=&#34;color:#9aedfe&#34;&gt;boolean&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; bookResponse: &lt;span style=&#34;color:#9aedfe&#34;&gt;ApiResponse&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;Book&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  data&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id: &lt;span style=&#34;color:#9aedfe&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;深入理解 TypeScript&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    author&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    price: &lt;span style=&#34;color:#9aedfe&#34;&gt;59.99&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inStock: &lt;span style=&#34;color:#9aedfe&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  status: &lt;span style=&#34;color:#9aedfe&#34;&gt;200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-keyof&#34;&gt;
  2. keyof
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;keyof&lt;/code&gt; 可以轻松获取 object 的 keys&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; User &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; UserKeys &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;keyof&lt;/span&gt; User; &lt;span style=&#34;color:#78787e&#34;&gt;// &amp;#34;id&amp;#34; | &amp;#34;name&amp;#34; | &amp;#34;age&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设我们的后端正在做 v1 到 v2 的版本升级，v1 版本接口和 v2 版本接口数据的改变是 key 的命名方式从 snake_case 变成 camelCase，其余都一致。那么原本函数的数据处理逻辑我们可以保留，只需把它传入的数据类型变为泛型，并且通过 &lt;code&gt;keyof&lt;/code&gt; 约束需要被处理的 key 的输入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;enum&lt;/span&gt; PayeeType {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CASH_PAYEE &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  NON_CASH_PAYEE &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Address &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  is_cash_payment_stop: &lt;span style=&#34;color:#9aedfe&#34;&gt;PayeeType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; AddressV2 &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isCashPaymentStop: &lt;span style=&#34;color:#9aedfe&#34;&gt;PayeeType&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; getCashPayeeText &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt;(address: &lt;span style=&#34;color:#9aedfe&#34;&gt;T&lt;/span&gt;[], field: &lt;span style=&#34;color:#9aedfe&#34;&gt;keyof&lt;/span&gt; T) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; cashPayeeIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; address.findIndex(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (addr) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt; addr[field] &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; PayeeType.CASH_PAYEE,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (cashPayeeIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Not Specified&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; isFirstStop &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; cashPayeeIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (isFirstStop) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Sender&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; isLastStop &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; cashPayeeIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;===&lt;/span&gt; address.length &lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; (isLastStop) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Recipient&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;`Stop &lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;${&lt;/span&gt;cashPayeeIndex &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; getCashPayeeTextV1 &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; (address: &lt;span style=&#34;color:#9aedfe&#34;&gt;Address&lt;/span&gt;[]) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  getCashPayeeText(address, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;is_cash_payment_stop&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; getCashPayeeTextV2 &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; (address: &lt;span style=&#34;color:#9aedfe&#34;&gt;AddressV2&lt;/span&gt;[]) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  getCashPayeeText(address, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;isCashPaymentStop&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;//❌
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; getCashPayeeTextV2 &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; (address: &lt;span style=&#34;color:#9aedfe&#34;&gt;AddressV2&lt;/span&gt;[]) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  getCashPayeeText(address, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;//❌
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; getCashPayeeTextV2 &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; (address: &lt;span style=&#34;color:#9aedfe&#34;&gt;AddressV2&lt;/span&gt;[]) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  getCashPayeeText(address, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;is_cash_payment_stop&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但在使用中可能会发现一个问题，由于 &lt;code&gt;keyof&lt;/code&gt; 的结果是一个联合类型，那么 &lt;code&gt;Type[keyof Type]&lt;/code&gt; 的类型也会是联合类型。&lt;/p&gt;
&lt;p&gt;所以在下面的函数中，即使我们知道传入的 key 是什么类型，但是返回类型却是一个联合类型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt; getProperty&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt;(obj: &lt;span style=&#34;color:#9aedfe&#34;&gt;T&lt;/span&gt;, key: &lt;span style=&#34;color:#9aedfe&#34;&gt;keyof&lt;/span&gt; T) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; obj[key]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; user &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  id: &lt;span style=&#34;color:#9aedfe&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age: &lt;span style=&#34;color:#9aedfe&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; myName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; getProperty(user, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#78787e&#34;&gt;//  string|number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; myAge &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; getProperty(user, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#78787e&#34;&gt;// string|number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;真是让人沮丧！&lt;/p&gt;
&lt;p&gt;那么如何解决这个问题呢？交给 &lt;code&gt;extends&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;3-extends&#34;&gt;
  3. extends
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;extends&lt;/code&gt; 操作符可用于类型约束，确保传入的类型具有特定的结构。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;K extends keyof T&lt;/code&gt;可以理解为，&lt;code&gt;K&lt;/code&gt; 是某个类型，这个类型在 &lt;code&gt;keyof T&lt;/code&gt; 内。&lt;/p&gt;
&lt;p&gt;既然不是联合类型，而是单一类型 ，那么类型推导可以根据 &lt;code&gt;K&lt;/code&gt; 的类型成功推导出 &lt;code&gt;T[K]&lt;/code&gt;是什么类型了 🎉！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;function&lt;/span&gt; getProperty&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;K&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;T&lt;/span&gt;&amp;gt;(obj: &lt;span style=&#34;color:#9aedfe&#34;&gt;T&lt;/span&gt;, key: &lt;span style=&#34;color:#9aedfe&#34;&gt;K&lt;/span&gt;)&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; T[K] {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; obj[key]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; user &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  id: &lt;span style=&#34;color:#9aedfe&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age: &lt;span style=&#34;color:#9aedfe&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; myName &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; getProperty(user, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#78787e&#34;&gt;//  string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; myAge &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; getProperty(user, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#78787e&#34;&gt;// number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;extends&lt;/code&gt;也可以和三目运算符结合，得到想要的类型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Action &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; { action&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;create&amp;#39;&lt;/span&gt;; item: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; { action&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;update&amp;#39;&lt;/span&gt;; itemId: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;; newValue: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; { action&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;; itemId: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; ExtractAction&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;U&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; T &lt;span style=&#34;color:#ff6ac1&#34;&gt;extends&lt;/span&gt; { action: &lt;span style=&#34;color:#9aedfe&#34;&gt;U&lt;/span&gt; } &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; T : &lt;span style=&#34;color:#9aedfe&#34;&gt;never&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; CreateAction &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; ExtractAction&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;Action&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;&amp;#39;&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#78787e&#34;&gt;// { action: &amp;#39;create&amp;#39;; item: string }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; UpdateAction &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; ExtractAction&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;Action&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;&amp;#39;&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#78787e&#34;&gt;// { action: &amp;#39;update&amp;#39;; itemId: number; newValue: string }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; DeleteAction &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; ExtractAction&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;Action&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;&amp;#39;&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#78787e&#34;&gt;// { action: &amp;#39;delete&amp;#39;; itemId: number }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-in&#34;&gt;
  4. in
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;in&lt;/code&gt; 操作符可以用于遍历对象类型的键，从而生成新的对象类型。
这种方式可以用于生成具有特定键名和类型的对象，增加代码的灵活性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; ValueBeKey&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;Record&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;unknown&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [P &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;keyof&lt;/span&gt; T]&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; P;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a: &lt;span style=&#34;color:#9aedfe&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  b: &lt;span style=&#34;color:#9aedfe&#34;&gt;2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c: &lt;span style=&#34;color:#9aedfe&#34;&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; result: &lt;span style=&#34;color:#9aedfe&#34;&gt;ValueBeKey&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;object&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  b&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们来实现官方提供的 Partial 和 Required&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; User &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  id: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Partial&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [K &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;keyof&lt;/span&gt; T]&lt;span style=&#34;color:#ff6ac1&#34;&gt;?:&lt;/span&gt; T[K]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Required&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [K &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;keyof&lt;/span&gt; T]&lt;span style=&#34;color:#ff6ac1&#34;&gt;-?:&lt;/span&gt; T[K]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; OptionalUser &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; Partial&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;User&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; RequiredUser &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; Required&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;OptionalUser&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以结合 &lt;code&gt;as&lt;/code&gt;,根据以前的 key 生成新的 key name&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; MappedUser &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [K &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;keyof&lt;/span&gt; User &lt;span style=&#34;color:#ff6ac1&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;`user_&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;${&lt;/span&gt;K&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;]&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; User[K]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; UserWithPrefixedKeys &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; MappedUser &lt;span style=&#34;color:#78787e&#34;&gt;// { user_id: number; user_name: string; user_age: number }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者和 &lt;code&gt;extends&lt;/code&gt;结合，筛选出符合对应类型的 key&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; FilterByType&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;Condition&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [K &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;keyof&lt;/span&gt; T]&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; T[K] &lt;span style=&#34;color:#ff6ac1&#34;&gt;extends&lt;/span&gt; Condition &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; K : &lt;span style=&#34;color:#9aedfe&#34;&gt;never&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}[&lt;span style=&#34;color:#ff6ac1&#34;&gt;keyof&lt;/span&gt; T]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; StringKeysOfUser &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; FilterByType&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;string&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#78787e&#34;&gt;// name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; NumberKeysOfUser &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; FilterByType&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;number&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#78787e&#34;&gt;// &amp;#34;id&amp;#34; | &amp;#34;age&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假如存在一个接口，它的请求中如果带有 &lt;code&gt;user&lt;/code&gt; 则接口中就会返回 &lt;code&gt;user&lt;/code&gt;对象，它的请求中如果带有 &lt;code&gt;driver&lt;/code&gt; 则接口中就会返回 &lt;code&gt;driver&lt;/code&gt;对象。它的请求中如果带有&lt;code&gt;user&lt;/code&gt;和&lt;code&gt;driver&lt;/code&gt;，那么就会返回&lt;code&gt;user&lt;/code&gt;和&lt;code&gt;driver&lt;/code&gt;对象。那么我们就可以结合上面的 &lt;code&gt;extends&lt;/code&gt; 帮我们完成这件事。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Extensions &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; { id: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;; name: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  driver&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; { phone: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; GetOrderParams&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;K&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;Extensions&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  orderUuid: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  extendKeys?: &lt;span style=&#34;color:#9aedfe&#34;&gt;K&lt;/span&gt;[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; OrderResponse&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;K&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;Extensions&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  orderUuid: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cityId: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  marketId: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  extensions&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [key &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; K]&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; Extensions[key]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; getOrder &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;K&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;Extensions&lt;/span&gt;&amp;gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  orderUuid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  extendKeys,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; GetOrderParams&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;K&lt;/span&gt;&amp;gt;) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  httpClient.&lt;span style=&#34;color:#ff6ac1&#34;&gt;get&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;OrderResponse&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;K&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;/api/order/detail&amp;#39;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      orderUuid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ...(&lt;span style=&#34;color:#ff6ac1&#34;&gt;!&lt;/span&gt;isEmpty(extendKeys) &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; { extendKeys: &lt;span style=&#34;color:#9aedfe&#34;&gt;extendKeys?.join&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; order &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; getOrder({ orderUuid&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt;, extendKeys&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;driver&amp;#39;&lt;/span&gt;] })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;order.then(({ data }) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(data.extensions.user.name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(data.extensions.driver.phone)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5-number&#34;&gt;
  5. [number]
&lt;/h3&gt;&lt;p&gt;使用索引访问类型可以获取元组或数组中元素的类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Parent &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Child &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; Parent[&lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;]; &lt;span style=&#34;color:#78787e&#34;&gt;// string | number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;6-infer&#34;&gt;
  6. infer
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;infer&lt;/code&gt; 用于在条件类型中和 &lt;code&gt;extends &lt;/code&gt;结合引入一个变量，以推断某个类型。&lt;/p&gt;
&lt;p&gt;它在复杂类型操作中非常有用，特别是在处理函数返回值类型时。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; ReturnType&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; T &lt;span style=&#34;color:#ff6ac1&#34;&gt;extends&lt;/span&gt; (...args: &lt;span style=&#34;color:#9aedfe&#34;&gt;any&lt;/span&gt;[]) &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;infer&lt;/span&gt; R &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; R : &lt;span style=&#34;color:#9aedfe&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;interface&lt;/span&gt; OrderReportsProps {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isDisplayLanguageDropdown: &lt;span style=&#34;color:#9aedfe&#34;&gt;boolean&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  language: &lt;span style=&#34;color:#9aedfe&#34;&gt;ReturnType&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;useLanguage&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以实现和上面的 &lt;code&gt;[number]&lt;/code&gt; 一样的功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Typescript&#34; data-lang=&#34;Typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Parent &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Flatten&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; T &lt;span style=&#34;color:#ff6ac1&#34;&gt;extends&lt;/span&gt; (&lt;span style=&#34;color:#ff6ac1&#34;&gt;infer&lt;/span&gt; R)[] &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; R : &lt;span style=&#34;color:#9aedfe&#34;&gt;T&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Child &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; Flatten&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;Parent&lt;/span&gt;&amp;gt;; &lt;span style=&#34;color:#78787e&#34;&gt;// string | number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以用于获取某个 filed 的值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Action &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; { action&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;create&amp;#34;&lt;/span&gt;; item: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; { action&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt;; itemId: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;; newValue: &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; { action&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;delete&amp;#34;&lt;/span&gt;; itemId: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; GetActionValue&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; T &lt;span style=&#34;color:#ff6ac1&#34;&gt;extends&lt;/span&gt; { action: &lt;span style=&#34;color:#9aedfe&#34;&gt;infer&lt;/span&gt; U } &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; U : &lt;span style=&#34;color:#9aedfe&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Value &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; GetActionValue&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;Action&lt;/span&gt;&amp;gt;; &lt;span style=&#34;color:#78787e&#34;&gt;// &amp;#34;create&amp;#34; | &amp;#34;update&amp;#34; | &amp;#34;delete&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;7-递归&#34;&gt;
  7. 递归
&lt;/h3&gt;&lt;p&gt;是的，类型也可以使用递归 ! 有很多有趣的玩法。&lt;/p&gt;
&lt;p&gt;但要注意，只有 &lt;code&gt;type&lt;/code&gt; 创造的类型才可以进行递归，&lt;code&gt;interface&lt;/code&gt; 的不可以&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Test &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; StrintToUnion&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;string&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; T &lt;span style=&#34;color:#ff6ac1&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;infer&lt;/span&gt; Letter &lt;span style=&#34;color:#5af78e&#34;&gt;}${&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;infer&lt;/span&gt; Rest&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; Letter &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; StrintToUnion&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;Rest&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;never&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Result &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; StringToUnion&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;Test&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#78787e&#34;&gt;//  &amp;#34;1&amp;#34; | &amp;#34;2&amp;#34; | &amp;#34;3&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设我们想要拿到某个 nested 对象的 key 去更新，为了避免 typo ，就可以利用递归创建一个 key value 都等于这个 nested 对象所有 key 的类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-TypeScript&#34; data-lang=&#34;TypeScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; ObjectKeyPaths&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;K&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;T &lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;keyof&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; T &lt;span style=&#34;color:#ff6ac1&#34;&gt;extends&lt;/span&gt; Record&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#9aedfe&#34;&gt;unknown&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; K &lt;span style=&#34;color:#ff6ac1&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;${&lt;/span&gt;K&lt;span style=&#34;color:#5af78e&#34;&gt;}${&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;}${&lt;/span&gt;ObjectKeyPaths&amp;lt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#57c7ff&#34;&gt;K&lt;/span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;]&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;never&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#9aedfe&#34;&gt;never&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;type&lt;/span&gt; Paths &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; ObjectKeyPaths&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  foo&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bar&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      baz: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  arr: &lt;span style=&#34;color:#9aedfe&#34;&gt;number&lt;/span&gt;[]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;const&lt;/span&gt; pathsObj&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; { [key &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; Paths]&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; key } &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  foo&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  arr&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;arr&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;foo.bar&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;foo.bar&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;foo.bar.baz&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;foo.bar.baz&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;更多&#34;&gt;
  更多
&lt;/h2&gt;&lt;p&gt;TypeScript 其实有很多 fancy 的写法，我也是从这个 &lt;a href=&#34;https://github.com/type-challenges/type-challenges&#34;&gt;repo&lt;/a&gt; 学了不少感兴趣的小伙伴可以多刷刷来更好地了解 TS 的类型系统 ～&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
